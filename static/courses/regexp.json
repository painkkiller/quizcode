{
    "name": "Регулярные выражения",
    "id": "regexp",
    "desc": "Данный интерактивный курс посвящен регулярным выражениям. Вы научитесь составлять сложные регулярные выражения и порешаете задачи на эту тему",
    "topics": {
        "creation-and-methods": {
            "name": "Создание и методы регулярных выражений",
            "nextTopic": "abc",
            "subs": [
                {
                    "title": "Что такое регулярное выражение?",
                    "body": [{
                        "type": "html",
                        "text": "<p>Как написано в википедии, <strong>Регуля́рные выраже́ния</strong> (англ. regular expressions) — формальный язык, используемый в компьютерных программах, работающих с текстом, для поиска и осуществления манипуляций с подстроками в тексте, основанный на использовании метасимволов (символов-джокеров, англ. wildcard characters). Для поиска используется строка-образец (англ. pattern, по-русски её часто называют «шаблоном», «маской»), состоящая из символов и метасимволов и задающая правило поиска. Для манипуляций с текстом дополнительно задаётся строка замены, которая также может содержать в себе специальные символы.</p><p>Регулярные выражения используются некоторыми текстовыми редакторами и утилитами для поиска и подстановки текста. И конечно же они активно применяются в программировании.</p><p>Истоки регулярных выражений лежат в теории автоматов, теории формальных языков и классификации формальных грамматик по Хомскому. Эти области изучают вычислительные модели (автоматы) и способы описания и классификации формальных языков. В 1940-х гг. Уоррен Маккалок и Уолтер Питтс описали нейронную систему, используя простой автомат в качестве модели нейрона. Математик Стивен Клини позже описал эти модели, используя свою систему математических обозначений, названную «регулярные множества». Кен Томпсон встроил их в редактор QED, а затем — в редактор ed под UNIX. С этого времени регулярные выражения стали широко использоваться в UNIX и UNIX-подобных утилитах, например в expr, awk, Emacs, vi, lex и Perl. Регулярные выражения в Perl и Tcl происходят от реализации, написанной Генри Спенсером. Филип Хейзел разработал библиотеку PCRE (англ. Perl-compatible regular expressions — Perl-совместимые регулярные выражения), которая используется во многих современных инструментах, таких как PHP и Apache</p>"
                    }],
                    "input": { "type": "next" }
                },
                {
                    "title": "Как создать регулярное выражение",
                    "body": [{
                        "type": "html",
                        "text": "<p>В JavaScript регулярное выражение — это один из типов объектов, который используется для поиска комбинаций символов в строках.</p><p>Существует два способа создания регулярных выражений. Первый задействует конструктор объекта RegExp, которому передают строку, из которой он создаёт регулярное выражение:</p>"
                    }, {
                        "type": "javascript",
                        "text": "const reg = new RegExp(\"abc\", \"g\");"
                    }, {
                        "type": "html",
                        "text": "<p>Преимущество этого способа заключается в том, что можно создать регулярку из строки.</p><p>Второй заключается в использовании литералов регулярных выражений. При таком подходе шаблон регулярного выражения заключают в слэши. Выглядит это так:</p>"
                    }, {
                        "type": "javascript",
                        "text": "const reg = /abc/g;"
                    }, {
                        "type": "html",
                        "text": "<p>Какой способ создания регулярных выражений выбрать? Тут стоит придерживаться такого правила: если вы предполагаете пользоваться регулярным выражением так, что оно остаётся неизменным — лучше использовать литерал. Если ваше регулярное выражение является динамическим и оно может меняться в ходе выполнения программы, лучше использовать конструктор RegExp.</p>"
                    }],
                    "input": { "type": "next" }
                },
                {
                    "title": "Флаги регулярных выражений",
                    "body": [{
                        "type": "html",
                        "text": "<p>Как вы наверное заметили на предыдущем шаге, второй аргумент, который передается в конструктор регулярного выражения это флаг. Он может принимать следующие значения:<br/> <strong>g</strong> - глобальное сопоставление<br/><strong>i</strong> - игнорирование регистра при сопоставлении<br/><strong>m</strong> - сопоставление по нескольким строкам; символы начала и конца (^ и $) начинают работать по нескольким строкам (то есть, происходит сопоставление с началом или концом каждой строки (строки разделяются символами \\n или \\r), а не только с началом или концом всей вводимой строки)<br/><strong>y</strong> - «липкий» поиск; сопоставление в целевой строке начинается с индекса, на который указывает свойство lastIndex этого регулярного выражения (и не пытается сопоставиться с любого более позднего индекса).</p><p>При инициализации регулярного выражения способом литерала, флаги вводятся так:</p>"
                    }, {
                        "type": "javascript",
                        "text": "const reg = /abc/gi;"
                    }, {
                        "type": "html",
                        "text": "<p>А в констукторе так:</p>"
                    }, {
                        "type": "javascript",
                        "text": "const reg = new RegExp(\"abc\", \"gi\");"
                    }, {
                        "type": "html",
                        "text": "<p>В нашем курсе вводимые в регулярку флаги будут указаны справа от ввода. Помните, что использование флагов меняет логику работы регулярного выражения!</p>"
                    }],
                    "input": { "type": "next" }
                },
                {
                    "title": "Методы регулярных выражений",
                    "body": [{
                        "type": "html",
                        "text": "<p>Регулярные выражения имеют свои собственные методы (<i>test()</i> и <i>exec()</i>), а также используются в методах строк. Рассмотрим эти методы подробнее.</p><p><i>exec()</i> Выполняет поиск соответствия в строке. Возвращает массив информации или null о несоответствии.<br/></p>"
                    }, {
                        "type": "javascript",
                        "text": "const regex = new RegExp('foo*', 'g');\nconst str = 'table football, foosball';\nlet array = regex.exec(str);\nconsole.log(array);\n// массив с информацией о первом нахождении строки соответствующей регулярному выражению"
                    }, {
                        "type": "html",
                        "text": "<p><i>test()</i> Проверяет соответствие в строке. Возвращает true или false.</p>"
                    }, {
                        "type": "javascript",
                        "text": "const str1 = 'table football';\nconst str2 = 'table';\nconst regex = new RegExp('foo*');\nconsole.log(regex.test(str1)); // true\nconsole.log(regex.test(str2)); // false"
                    }],
                    "input": { "type": "next" }
                },
                {
                    "title": "Методы строк использующие регулярные выражения",
                    "body": [{
                        "type": "html",
                        "text": "<p>В строках регулярные варажения могут использоваться в следущих методах:<br/><i>match()</i> - Возвращает массив, содержащий все совпадения, включая группы захвата, или null если совпадение не найдено.<br/><i>matchAll()</i> - Возвращает итератор, содержащий все совпадения, включая группы захвата<br/><i>search()</i> - Проверяет соответствие в строке. Возвращает индекс соответствия, или -1 если поиск завершается неудачей.<br/><i>replace()</i> - Выполняет поиск соответствия в строке и заменяет соответствующую подстроку заменяющей подстрокой.<br/><i>replaceAll()</i> - Выполняет поиск всех совпадений в строке и заменяет совпадающие подстроки заменяющей подстрокой.<br/><i>split()</i> - Использует регулярное выражение или фиксированную строку для разбиения строки на массив подстрок.</p>"
                    }],
                    "input": { "type": "next" }
                }
            ]
        },
        "abc": {
            "name": "Английские буквы",
            "nextTopic": "digits",
            "subs": [
                  {
                    "title": "Учимся находить в тексте нужные буквы",
                    "body": "<p><strong>Регулярные выражения</strong> чрезвычайно полезны при извлечении информации из текста, такого как код, файлы журналов, электронные таблицы или даже документы. И хотя в основе формальных языков лежит много теории, в следующих уроках и примерах будут рассмотрены более практические применения регулярных выражений, чтобы вы могли использовать их как можно быстрее.</p><p>Первое, что нужно понимать при использовании регулярных выражений, это то, что все, по сути, является символом, и мы пишем шаблоны, соответствующие определенной последовательности символов (также известной как строка). В большинстве шаблонов используется обычный ASCII, который включает буквы, цифры, знаки препинания и другие символы на вашей клавиатуре, такие как %#$@!, но символы Unicode также можно использовать для соответствия любому типу международного текста.</p><p>Ниже приведены несколько строк текста, обратите внимание, как текст меняется, выделяя соответствующие символы в каждой строке по мере ввода в поле ввода ниже. Чтобы перейти к следующему уроку, вам нужно будет использовать новый синтаксис и концепцию, представленные на каждом уроке, чтобы написать шаблон, соответствующий всем представленным строкам.</p><p>Попробуйте написать шаблон, который соответствует всем трем строкам, он может быть таким же простым, как <strong>обычные буквы в каждой строке</strong>.</p>",
                    "input": {
                        "type": "regexp-input",
                        "body": {
                            "instruction": "Введите шаблон и выберите в каждой строке все комбинации букв abc",
                            "table": [
                                {
                                    "task": "Выбрать",
                                    "text": "abcdefg ndfhabc",
                                    "answer": "abcabc"
                                },
                                {
                                    "task": "Выбрать",
                                    "text": "abcde",
                                    "answer": "abc"
                                },
                                {
                                    "task": "Выбрать",
                                    "text": "abc",
                                    "answer": "abc"
                                }
                            ]
                        },
                        "checker": "regexpChecker"
                    },
                    "solution": "<p>В данном случае решение простое - <strong>abc</strong>. Любая строка может быть регуляркой которая \"матчит\" эту строку.</p>"
                },
                {
                    "title": "Учимся находить в тексте нужные буквы 2",
                    "body": "<p>А что если мы захотим выбрать одну букву но она должана быть либо a, либо b, либо с?</p><p>Существует метод для сопоставления определенных символов с использованием регулярных выражений, определяя их внутри квадратных скобок. Например, шаблон <strong>[abc]</strong> будет соответствовать только единственной букве a, b или c и ничему другому.</p><p>Ниже приведена пара строк, в которых мы хотим выбрать только первые три строки, и исключить последние три строки. Используйте только приведенную выше нотацию.</p>",
                    "input": {
                        "type": "regexp-input",
                        "body": {
                            "instruction": "Введите шаблон и выберите первые три слова целиком",
                            "table": [
                                {
                                    "task": "Выбрать",
                                    "text": "can",
                                    "answer": "can"
                                },
                                {
                                    "task": "Выбрать",
                                    "text": "man",
                                    "answer": "man"
                                },
                                {
                                    "task": "Выбрать",
                                    "text": "fan",
                                    "answer": "fan"
                                },
                                {
                                    "task": "Исключить",
                                    "text": "dan",
                                    "answer": ""
                                },
                                {
                                    "task": "Исключить",
                                    "text": "ran",
                                    "answer": ""
                                },
                                {
                                    "task": "Исключить",
                                    "text": "pan",
                                    "answer": ""
                                }
                            ]
                        },
                        "checker": "regexpChecker"
                    },
                    "solution": "<p>Решение - <strong>[cmf]an</strong>. Первые 3 слова отличаются между собой только первой буквой, соответственно делаем ее условной. </p>"
                },
                {
                    "title": "Учимся исключать в тексте нужные буквы",
                    "body": "<p>В некоторых случаях мы можем знать, что существуют определенные символы, которым мы также не хотим сопоставлять, например, мы можем захотеть сопоставлять только те буквы, которые не относятся к коду страны RU.</p><p>Для представления этого мы используем аналогичное выражение, которое исключает определенные символы, используя квадратные скобки и ^ (каретку). Например, шаблон [^abc] будет соответствовать любому одиночному символу, за исключением букв a, b или c.</p><p>С помощью приведенных ниже строк попробуйте написать шаблон, который соответствует только первым двум словам (hog, dog но не bog). Обратите внимание, что большинство шаблонов этого типа также могут быть написаны с использованием техники из предыдущего урока, поскольку на самом деле это две стороны одной медали. Имея оба варианта, вы можете решить, какой из них легче написать и понять при создании собственных шаблонов.</p>",
                    "input": {
                        "type": "regexp-input",
                        "body": {
                            "instruction": "Выберите первые два слова hog и dog",
                            "table": [
                                {
                                    "task": "Выбрать",
                                    "text": "hog",
                                    "answer": "hog"
                                },
                                {
                                    "task": "Выбрать",
                                    "text": "dog",
                                    "answer": "dog"
                                },
                                {
                                    "task": "Исключить",
                                    "text": "bog",
                                    "answer": ""
                                }
                            ]
                        },
                        "checker": "regexpChecker"
                    },
                    "solution": "<p>Эту задачу можно решить разными способами. Методом исключения - <strong>[^b]og</strong>, т.к. нам надо исключить первую букву в слове bog. Но и регулярка вида <strong>[hd]og</strong> тоже бы сработала</p>"
                },
                {
                    "title": "Диапазоны букв",
                    "body": "<p>Мы только что узнали, как создать шаблон, который соответствует или исключает определенные символы - но что, если мы хотим сопоставить символ, который может находиться в последовательном диапазоне символов? Неужели у нас нет другого выбора, кроме как перечислить их все?</p><p>К счастью, при использовании обозначения в квадратных скобках существует сокращение для сопоставления символа в списке последовательных символов с помощью тире для обозначения диапазона символов. Например, шаблон [0-6] будет соответствовать только любому однозначному символу от нуля до шести, и никакому другому. И аналогично, [^n-p] будет соответствовать только любому отдельному символу, за исключением для букв от n до p.</p><p>В одном наборе скобок также можно использовать несколько диапазонов символов наряду с отдельными символами. Примером этого является буквенно-цифровой метасимвол \\w, который эквивалентен диапазону символов [A-Za-z0-9_] и часто используется для сопоставления символов в английском тексте.</p><p>В приведенном ниже упражнении обратите внимание, что все совпадающие и пропускаемые строки имеют шаблон, и используйте обозначения в скобках, чтобы сопоставить или пропустить каждый символ из каждой строки. Имейте в виду, что шаблоны чувствительны к регистру, и az отличается от Az с точки зрения символов, которым он соответствует (нижний и верхний регистры).</p>",
                    "input": {
                        "type": "regexp-input",
                        "body": {
                            "instruction": "Введите шаблон и выберите первые три строки",
                            "table": [
                                {
                                    "task": "Выбрать",
                                    "text": "Ana",
                                    "answer": "Ana"
                                },
                                {
                                    "task": "Выбрать",
                                    "text": "Bob",
                                    "answer": "Bob"
                                },
                                {
                                    "task": "Выбрать",
                                    "text": "Cpc",
                                    "answer": "Cpc"
                                },
                                {
                                    "task": "Пропустить",
                                    "text": "aax",
                                    "answer": ""
                                },
                                {
                                    "task": "Пропустить",
                                    "text": "bby",
                                    "answer": ""
                                },
                                {
                                    "task": "Пропустить",
                                    "text": "ccz",
                                    "answer": ""
                                }
                            ]
                        },
                        "checker": "regexpChecker"
                    },
                    "solution": "<p>Данную задачу следует разбить на более простые части. Сначала нам нужно выбрать заглавную букву, значит берем диапазон [A-Z]. Затем выбираем две оставшиеся маленькие буквы, это можно сделать разными способами. Решение <strong>[A-Z][a-z][a-z]</strong> вполне подойдет, а на следующем шаге мы разберем, как работать с диапазонами букв.</p>"
                }, 
                {
                    "title": "Повторы символов",
                    "body": "<p>Мы уже научились указывать диапазон символов, которым хотим соответствовать, но как насчет количества повторений символов, которым мы хотим соответствовать? Один из способов, которым мы можем это сделать, - явно указать, сколько именно символов мы хотим, например. \\d \\d \\d которые соответствовали бы ровно трем цифрам.</p><p>Более удобный способ - указать, сколько повторений каждого символа мы хотим, используя обозначение в фигурных скобках. Например, a{3} будет соответствовать символу a ровно три раза. Некоторые движки регулярных выражений даже позволят вам указать диапазон для этого повторения таким образом, что a{1,3} будет соответствовать символу a не более 3 раз, но не менее одного раза, например.</p><p>Этот квантификатор может использоваться с любым символом или специальными метасимволами, например, w{3} (три w), [wxy]{5} (пять символов, каждый из которых может быть w, x или y) и .{2,6} (от двух до шести любых символов).</p><p>В приведенных ниже строках последняя строка, содержащая только одну z, не соответствует тому, что мы сочли бы правильным написанием сленгового wazzup?. Попробуйте написать шаблон, который соответствует только первым двум вариантам написания, используя обозначение фигурной скобки, приведенное выше.</p>",
                    "input": {
                        "type": "regexp-input",
                        "body": {
                            "instruction": "Введите шаблон и выберите в каждой строке все комбинации букв abc",
                            "table": [
                                {
                                    "task": "Выбрать",
                                    "text": "wazzzzzup",
                                    "answer": "wazzzzzup"
                                },
                                {
                                    "task": "Выбрать",
                                    "text": "wazzzup",
                                    "answer": "wazzzup"
                                },
                                {
                                    "task": "Выбрать",
                                    "text": "wazzup",
                                    "answer": "wazzup"
                                },
                                {
                                    "task": "Пропустить",
                                    "text": "wazup",
                                    "answer": ""
                                }
                            ]
                        },
                        "checker": "regexpChecker"
                    },
                    "solution": "<p>Оптимальное решение в данном случае - <strong>waz{2,5}up</strong>. Буква z нам тут нужна от 2 до 5 раз.</p>"
                }
            ]
        },
        "digits": {
            "name": "Цифры",
            "subs": [
                {
                    "title": "Выбираем цифры",
                    "body": "<p>В предыдущей теме мы научились работать с буквами, теперь пришло время разобраться с цифрами.</p><p>Как же как и буквы, цифры выбираются напрямую, вводом их в регулярное выражение</p><p>Cимвол <strong>\\d</strong> может использоваться вместо любой цифры от 0 до 9. Предшествующая косая черта отличает его от простого символа d и указывает, что это метасимвол.</p>",
                    "input": {
                        "type": "regexp-input",
                        "body": {
                            "instruction": "Введите шаблон и выберите в каждой строке все цифры 123",
                            "table": [
                                {
                                    "task": "Выбрать",
                                    "text": "abc123xyz",
                                    "answer": "123"
                                },
                                {
                                    "task": "Выбрать",
                                    "text": "define \"123\"",
                                    "answer": "123"
                                },
                                {
                                    "task": "Выбрать",
                                    "text": "var g = 123;",
                                    "answer": "123"
                                },
                                {
                                    "task": "Пропустить",
                                    "text": "www",
                                    "answer": ""
                                }
                            ]
                        },
                        "checker": "regexpChecker"
                    },
                    "solution": "<p>Решение - <strong>123</strong>.</p>"
                },
                {
                    "title": "Выбираем любые цифры",
                    "body": "<p>А что если нам нужно выбрать все цифры?</p><p>Cимвол <strong>\\d</strong> может использоваться вместо любой цифры от 0 до 9. Предшествующая косая черта отличает его от простого символа d и указывает, что это метасимвол.</p>",
                    "input": {
                        "type": "regexp-input",
                        "body": {
                            "instruction": "Введите шаблон и выберите в первых трех строках по цифре",
                            "table": [
                                {
                                    "task": "Выбрать",
                                    "text": "day 2",
                                    "answer": "2"
                                },
                                {
                                    "task": "Выбрать",
                                    "text": "\"1\"",
                                    "answer": "1"
                                },
                                {
                                    "task": "Выбрать",
                                    "text": "5th month",
                                    "answer": "5"
                                },
                                {
                                    "task": "Пропустить",
                                    "text": "text without digits",
                                    "answer": ""
                                }
                            ]
                        },
                        "checker": "regexpChecker"
                    },
                    "solution": "<p>Решение - <strong>\\d</strong>.</p>"
                }
            ]
        },
        "any-not-digit": {
            "name": "Любая не цифра",
            "subs": []
        }
    }
}