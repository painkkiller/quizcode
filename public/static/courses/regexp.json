{
    "name": "Регулярные выражения",
    "id": "regexp",
    "desc": "Данный интерактивный курс посвящен регулярным выражениям. Вы научитесь составлять сложные регулярные выражения и порешаете задачи на эту тему",
    "topics": {
        "abc": {
            "name": "Буквы",
            "subs": [
                {
                    "title": "Как создать регулярное выражение",
                    "body": [{
                        "type": "html",
                        "text": "<p>В JavaScript регулярное выражение — это один из типов объектов, который используется для поиска комбинаций символов в строках.</p><p>Существует два способа создания регулярных выражений. Первый задействует конструктор объекта RegExp, которому передают строку, из которой он создаёт регулярное выражение:</p>"
                    }, {
                        "type": "javascript",
                        "text": "const reg = new RegExp(\"abc\", \"g\");"
                    }, {
                        "type": "html",
                        "text": "<p>Преимущество этого способа заключается в том, что можно создать регулярку из строки.</p><p>Второй заключается в использовании литералов регулярных выражений. При таком подходе шаблон регулярного выражения заключают в слэши. Выглядит это так:</p>"
                    }, {
                        "type": "javascript",
                        "text": "const reg = /abc/g;"
                    }, {
                        "type": "html",
                        "text": "<p>Какой способ создания регулярных выражений выбрать? Тут стоит придерживаться такого правила: если вы предполагаете пользоваться регулярным выражением так, что оно остаётся неизменным — лучше использовать литерал. Если ваше регулярное выражение является динамическим, оно может меняться в ходе выполнения программы, лучше использовать конструктор RegExp.</p>"
                    }],
                    "input": { "type": "next" }
                },
                {
                    "title": "Учимся находить в тексте нужные буквы",
                    "body": "<p><strong>Регулярные выражения</strong> чрезвычайно полезны при извлечении информации из текста, такого как код, файлы журналов, электронные таблицы или даже документы. И хотя в основе формальных языков лежит много теории, в следующих уроках и примерах будут рассмотрены более практические применения регулярных выражений, чтобы вы могли использовать их как можно быстрее.</p><p>Первое, что нужно понимать при использовании регулярных выражений, это то, что все, по сути, является символом, и мы пишем шаблоны, соответствующие определенной последовательности символов (также известной как строка). В большинстве шаблонов используется обычный ASCII, который включает буквы, цифры, знаки препинания и другие символы на вашей клавиатуре, такие как %#$@!, но символы Unicode также можно использовать для соответствия любому типу международного текста.</p><p>Ниже приведены несколько строк текста, обратите внимание, как текст меняется, выделяя соответствующие символы в каждой строке по мере ввода в поле ввода ниже. Чтобы перейти к следующему уроку, вам нужно будет использовать новый синтаксис и концепцию, представленные на каждом уроке, чтобы написать шаблон, соответствующий всем представленным строкам.</p><p>Попробуйте написать шаблон, который соответствует всем трем строкам, он может быть таким же простым, как <strong>обычные буквы в каждой строке</strong>.</p>",
                    "input": {
                        "type": "regexp-input",
                        "body": {
                            "instruction": "Введите шаблон и выберите в каждой строке все комбинации букв abc",
                            "table": [
                                {
                                    "task": "Выбрать",
                                    "text": "abcdefg ndfhabc",
                                    "answer": "abcabc"
                                },
                                {
                                    "task": "Выбрать",
                                    "text": "abcde",
                                    "answer": "abc"
                                },
                                {
                                    "task": "Выбрать",
                                    "text": "abc",
                                    "answer": "abc"
                                }
                            ]
                        },
                        "checker": "regexpChecker"
                    }
                },
                {
                    "title": "Учимся находить в тексте нужные буквы 2",
                    "body": "body 2"
                },
                {
                    "title": "Учимся находить в тексте нужные буквы 3",
                    "body": "body 3"
                },
                {
                    "title": "Учимся находить в тексте нужные буквы 4",
                    "body": "body 4"
                }
            ]
        },
        "digits": {
            "name": "Цифры",
            "subs": []
        },
        "any-not-digit": {
            "name": "Любая не цифра",
            "subs": []
        }
    }
}