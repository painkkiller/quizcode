{
    "name": "Регулярные выражения",
    "id": "regexp",
    "desc": "Данный интерактивный курс посвящен регулярным выражениям. Вы научитесь составлять сложные регулярные выражения и порешаете задачи на эту тему",
    "topics": {
        "creation-and-methods": {
            "name": "Создание и методы регулярных выражений",
            "nextTopic": "abc",
            "subs": [
                {
                    "title": "Что такое регулярное выражение?",
                    "body": [{
                        "type": "html",
                        "text": "<p>Как написано в википедии, <strong>Регуля́рные выраже́ния</strong> (англ. regular expressions) — формальный язык, используемый в компьютерных программах, работающих с текстом, для поиска и осуществления манипуляций с подстроками в тексте, основанный на использовании метасимволов (символов-джокеров, англ. wildcard characters). Для поиска используется строка-образец (англ. pattern, по-русски её часто называют «шаблоном», «маской»), состоящая из символов и метасимволов и задающая правило поиска. Для манипуляций с текстом дополнительно задаётся строка замены, которая также может содержать в себе специальные символы.</p><p>Регулярные выражения используются некоторыми текстовыми редакторами и утилитами для поиска и подстановки текста. И конечно же они активно применяются в программировании.</p><p>Истоки регулярных выражений лежат в теории автоматов, теории формальных языков и классификации формальных грамматик по Хомскому. Эти области изучают вычислительные модели (автоматы) и способы описания и классификации формальных языков. В 1940-х гг. Уоррен Маккалок и Уолтер Питтс описали нейронную систему, используя простой автомат в качестве модели нейрона. Математик Стивен Клини позже описал эти модели, используя свою систему математических обозначений, названную «регулярные множества». Кен Томпсон встроил их в редактор QED, а затем — в редактор ed под UNIX. С этого времени регулярные выражения стали широко использоваться в UNIX и UNIX-подобных утилитах, например в expr, awk, Emacs, vi, lex и Perl. Регулярные выражения в Perl и Tcl происходят от реализации, написанной Генри Спенсером. Филип Хейзел разработал библиотеку PCRE (англ. Perl-compatible regular expressions — Perl-совместимые регулярные выражения), которая используется во многих современных инструментах, таких как PHP и Apache</p>"
                    }],
                    "input": { "type": "next" }
                },
                {
                    "title": "Как создать регулярное выражение",
                    "body": [{
                        "type": "html",
                        "text": "<p>В JavaScript регулярное выражение — это один из типов объектов, который используется для поиска комбинаций символов в строках.</p><p>Существует два способа создания регулярных выражений. Первый задействует конструктор объекта RegExp, которому передают строку, из которой он создаёт регулярное выражение:</p>"
                    }, {
                        "type": "javascript",
                        "text": "const reg = new RegExp(\"abc\", \"g\");"
                    }, {
                        "type": "html",
                        "text": "<p>Преимущество этого способа заключается в том, что можно создать регулярку из строки.</p><p>Второй заключается в использовании литералов регулярных выражений. При таком подходе шаблон регулярного выражения заключают в слэши. Выглядит это так:</p>"
                    }, {
                        "type": "javascript",
                        "text": "const reg = /abc/g;"
                    }, {
                        "type": "html",
                        "text": "<p>Какой способ создания регулярных выражений выбрать? Тут стоит придерживаться такого правила: если вы предполагаете пользоваться регулярным выражением так, что оно остаётся неизменным — лучше использовать литерал. Если ваше регулярное выражение является динамическим и оно может меняться в ходе выполнения программы, лучше использовать конструктор RegExp.</p>"
                    }],
                    "input": { "type": "next" }
                },
                {
                    "title": "Флаги регулярных выражений",
                    "body": [{
                        "type": "html",
                        "text": "<p>Как вы наверное заметили на предыдущем шаге, второй аргумент, который передается в конструктор регулярного выражения это флаг. Он может принимать следующие значения:<br/> <strong>g</strong> - глобальное сопоставление<br/><strong>i</strong> - игнорирование регистра при сопоставлении<br/><strong>m</strong> - сопоставление по нескольким строкам; символы начала и конца (^ и $) начинают работать по нескольким строкам (то есть, происходит сопоставление с началом или концом каждой строки (строки разделяются символами \\n или \\r), а не только с началом или концом всей вводимой строки)<br/><strong>y</strong> - «липкий» поиск; сопоставление в целевой строке начинается с индекса, на который указывает свойство lastIndex этого регулярного выражения (и не пытается сопоставиться с любого более позднего индекса).</p><p>При инициализации регулярного выражения способом литерала, флаги вводятся так:</p>"
                    }, {
                        "type": "javascript",
                        "text": "const reg = /abc/gi;"
                    }, {
                        "type": "html",
                        "text": "<p>А в констукторе так:</p>"
                    }, {
                        "type": "javascript",
                        "text": "const reg = new RegExp(\"abc\", \"gi\");"
                    }, {
                        "type": "html",
                        "text": "<p>В нашем курсе вводимые в регулярку флаги будут указаны справа от ввода. Помните, что использование флагов меняет логику работы регулярного выражения!</p>"
                    }],
                    "input": { "type": "next" }
                },
                {
                    "title": "Методы регулярных выражений",
                    "body": [{
                        "type": "html",
                        "text": "<p>Регулярные выражения имеют свои собственные методы (<i>test()</i> и <i>exec()</i>), а также используются в методах строк. Рассмотрим эти методы подробнее.</p><p><i>exec()</i> Выполняет поиск соответствия в строке. Возвращает массив информации или null о несоответствии.<br/></p>"
                    }, {
                        "type": "javascript",
                        "text": "const regex = new RegExp('foo*', 'g');\nconst str = 'table football, foosball';\nlet array = regex.exec(str);\nconsole.log(array);\n// массив с информацией о первом нахождении строки соответствующей регулярному выражению"
                    }, {
                        "type": "html",
                        "text": "<p><i>test()</i> Проверяет соответствие в строке. Возвращает true или false.</p>"
                    }, {
                        "type": "javascript",
                        "text": "const str1 = 'table football';\nconst str2 = 'table';\nconst regex = new RegExp('foo*');\nconsole.log(regex.test(str1)); // true\nconsole.log(regex.test(str2)); // false"
                    }],
                    "input": { "type": "next" }
                },
                {
                    "title": "Методы строк использующие регулярные выражения",
                    "body": [{
                        "type": "html",
                        "text": "<p>В строках регулярные варажения могут использоваться в следущих методах:<br/><i>match()</i> - Возвращает массив, содержащий все совпадения, включая группы захвата, или null если совпадение не найдено.<br/><i>matchAll()</i> - Возвращает итератор, содержащий все совпадения, включая группы захвата<br/><i>search()</i> - Проверяет соответствие в строке. Возвращает индекс соответствия, или -1 если поиск завершается неудачей.<br/><i>replace()</i> - Выполняет поиск соответствия в строке и заменяет соответствующую подстроку заменяющей подстрокой.<br/><i>replaceAll()</i> - Выполняет поиск всех совпадений в строке и заменяет совпадающие подстроки заменяющей подстрокой.<br/><i>split()</i> - Использует регулярное выражение или фиксированную строку для разбиения строки на массив подстрок.</p>"
                    }],
                    "input": { "type": "next" }
                }
            ]
        },
        "abc": {
            "name": "Буквы",
            "nextTopic": "digits",
            "subs": [
                  {
                    "title": "Учимся находить в тексте нужные буквы",
                    "body": "<p><strong>Регулярные выражения</strong> чрезвычайно полезны при извлечении информации из текста, такого как код, файлы журналов, электронные таблицы или даже документы. И хотя в основе формальных языков лежит много теории, в следующих уроках и примерах будут рассмотрены более практические применения регулярных выражений, чтобы вы могли использовать их как можно быстрее.</p><p>Первое, что нужно понимать при использовании регулярных выражений, это то, что все, по сути, является символом, и мы пишем шаблоны, соответствующие определенной последовательности символов (также известной как строка). В большинстве шаблонов используется обычный ASCII, который включает буквы, цифры, знаки препинания и другие символы на вашей клавиатуре, такие как %#$@!, но символы Unicode также можно использовать для соответствия любому типу международного текста.</p><p>Ниже приведены несколько строк текста, обратите внимание, как текст меняется, выделяя соответствующие символы в каждой строке по мере ввода в поле ввода ниже. Чтобы перейти к следующему уроку, вам нужно будет использовать новый синтаксис и концепцию, представленные на каждом уроке, чтобы написать шаблон, соответствующий всем представленным строкам.</p><p>Попробуйте написать шаблон, который соответствует всем трем строкам, он может быть таким же простым, как <strong>обычные буквы в каждой строке</strong>.</p>",
                    "input": {
                        "type": "regexp-input",
                        "body": {
                            "instruction": "Введите шаблон и выберите в каждой строке все комбинации букв abc",
                            "table": [
                                {
                                    "task": "Выбрать",
                                    "text": "abcdefg ndfhabc",
                                    "answer": "abcabc"
                                },
                                {
                                    "task": "Выбрать",
                                    "text": "abcde",
                                    "answer": "abc"
                                },
                                {
                                    "task": "Выбрать",
                                    "text": "abc",
                                    "answer": "abc"
                                }
                            ]
                        },
                        "checker": "regexpChecker"
                    }
                },
                {
                    "title": "Учимся находить в тексте нужные буквы 2",
                    "body": "<p>body 2</p>",
                    "input": {
                        "type": "regexp-input",
                        "body": {
                            "instruction": "Введите шаблон и выберите в каждой строке все комбинации букв abc",
                            "table": [
                                {
                                    "task": "Выбрать",
                                    "text": "abcdefg ndfhabc",
                                    "answer": "abcabc"
                                },
                                {
                                    "task": "Выбрать",
                                    "text": "abcde",
                                    "answer": "abc"
                                },
                                {
                                    "task": "Выбрать",
                                    "text": "abc",
                                    "answer": "abc"
                                }
                            ]
                        },
                        "checker": "regexpChecker"
                    }
                },
                {
                    "title": "Учимся находить в тексте нужные буквы 3",
                    "body": "<p>body 3</p>",
                    "input": {
                        "type": "regexp-input",
                        "body": {
                            "instruction": "Введите шаблон и выберите в каждой строке все комбинации букв abc",
                            "table": [
                                {
                                    "task": "Выбрать",
                                    "text": "abcdefg ndfhabc",
                                    "answer": "abcabc"
                                },
                                {
                                    "task": "Выбрать",
                                    "text": "abcde",
                                    "answer": "abc"
                                },
                                {
                                    "task": "Выбрать",
                                    "text": "abc",
                                    "answer": "abc"
                                }
                            ]
                        },
                        "checker": "regexpChecker"
                    }
                },
                {
                    "title": "Учимся находить в тексте нужные буквы 4",
                    "body": "<p>body 4</p>",
                    "input": {
                        "type": "regexp-input",
                        "body": {
                            "instruction": "Введите шаблон и выберите в каждой строке все комбинации букв abc",
                            "table": [
                                {
                                    "task": "Выбрать",
                                    "text": "abcdefg ndfhabc",
                                    "answer": "abcabc"
                                },
                                {
                                    "task": "Выбрать",
                                    "text": "abcde",
                                    "answer": "abc"
                                },
                                {
                                    "task": "Выбрать",
                                    "text": "abc",
                                    "answer": "abc"
                                }
                            ]
                        },
                        "checker": "regexpChecker"
                    }
                }
            ]
        },
        "digits": {
            "name": "Цифры",
            "subs": []
        },
        "any-not-digit": {
            "name": "Любая не цифра",
            "subs": []
        }
    }
}