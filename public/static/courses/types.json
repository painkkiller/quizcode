{
   "name": "Типы данных",
   "id": "jstypes",
   "desc": "Данный курс для начинающих ознакомит вас с типами данных в JavaScript, практические примеры и тестовые задания помогут усвоить полученные знания.",
   "topics": {
      "javascript-types": {
         "name": "Базовые моменты",
         "subs": [
            {
               "title": "Введение",
               "body": [
                  {
                     "type": "html",
                     "text": "<p>Значение в JavaScript всегда относится к данным определённого типа. Есть восемь основных типов данных в JavaScript. Переменная в JavaScript может содержать любые данные. В один момент там может быть строка, а в другой – число. Языки программирования, в которых такое возможно, называются «динамически типизированными». Это значит, что типы данных есть, но переменные не привязаны ни к одному из них.</p> <p>Например:</p>"
                  },
                  {
                     "type": "javascript",
                     "text": "let message = 'Hello QuizCode'\nmessage = 19990407"
                  },
                  {
                     "type": "html",
                     "text": "<p>Вопросы:</p> <p>Будет ли ошибка?</p>"
                  },
                  {
                     "type": "javascript",
                     "text": "let message = 123456\nmessage = 'I love puppies'"
                  },
                  {
                     "type": "html",
                     "text": "<p>JavaScript это динамически типизированный язык?</p> <p>Верно ли утверждение: 'Переменные в JavaScript не имеют типов, но типы есть у хранящихся в них значений'?</p>"
                  }
               ],
               "input": {
                  "type": "next"
               }
            },
            {
               "title": "number",
               "subs": [
                  {
                     "type": "html",
                     "text": "<p>Числовой тип данных number представляет как целочисленные значения (45), так и числа с плавающей точкой (123.39).</p> <p>Пример: </p>"
                  },
                  {
                     "type": "javascript",
                     "text": "let number = 1234\n number = 2.5"
                  },
                  {
                     "type": "html",
                     "text": "<p>Если передается выражение, то нужно заключать его в скобки, т.к. typeof имеет более высокий приоритет, чем бинарные операторы. Cкобки необходимы для определения типа значения, которое получилось в результате выполнения выражения в них.</p>"
                  },
                  {
                     "type": "javascript",
                     "text": "typeof 50 + ' Квартир' // Выведет 'number Квартир'\ntypeof (50 + ' Квартир') // Выведет 'string'"
                  }
               ],
               "input": {
                  "type": "next"
               }
            },
            {
               "title": "NaN",
               "subs": [
                  {
                     "type": "html",
                     "text": "<p>Тип данных NaN означает вычислительную ошибку. Это результат неправильной или неопределённой математической операции.</p>"
                  },
                  {
                     "type": "javascript",
                     "text": "let number = 1\nlet sting = 'строка'\nconsole.log(number * string) // NaN\n"
                  },
                  {
                     "type": "html",
                     "text": "<p>Почти* любая математическая операция с NaN возвращает NaN</p>"
                  },
                  {
                     "type": "javascript",
                     "text": "let c = 1 + NaN\nconsole.log(c) // NaN\nconsole.log(typeof c) // number "
                  },
                  {
                     "type": "html",
                     "text": "NaN относится к типу данных number"
                  },
                  {
                     "type": "javacript",
                     "text": "console.log(typeof NaN) // number"
                  },
                  {
                     "type": "html",
                     "text": "<p>Переменная которой присвоено значение NaN относится к типу данных number</p>"
                  },
                  {
                     "type": "javascript",
                     "text": "let b = NaN\nconsole.log(typeof b) // number "
                  },
                  {
                     "type": "html",
                     "text": "<p>Любая математическая операция с NaN возвращает NaN</p><p>Пример: </p>"
                  },
                  {
                     "type": "javascript",
                     "text": "let c = 1 + NaN\nconsole.log(c) // NaN\nconsole.log(typeof c) // number "
                  }
               ],
               "input": {
                  "type": "next"
               }
            },
            {
               "title": "Строка",
               "subs": [
                  {
                     "type": "html",
                     "text": "<p>Строка string в JavaScript должна быть заключена в кавычки: одинарные, обратные или двойные.</p></p>Строка может быть пустой.</p>"
                  },
                  {
                     "type": "javascript",
                     "text": "let emptyStr = '' // пустая строка\nlet str = 'Hello QuizCode\nlet message = `Обратные кавычки дают нам возможность использовать внутри себя переменные. Например: ${str}`"
                  }
               ],
               "input": {
                  "type": "next"
               }
            },
            {
               "title": "Булевый тип",
               "subs": [
                  {
                     "type": "html",
                     "text": "<p>Булевый тип boolean имеет только два значения: true (истина) и false (ложь). Такой тип, как правило, используется для хранения значений да/нет. Если значение у переменной опущено или равно 0, -0, null, false, NaN, undefined или пустой строке (''), начальное значение переменной – false.</p>"
                  },
                  {
                     "type": "javacript",
                     "text": "let a = 0\nlet b = -0\nlet c = null\nlet d = false\nlet e = NaN\nlet f = undefined"
                  }
               ],
               "input": {
                  "type": "next"
               }
            },
            {
               "title": "null",
               "subs": [
                  {
                     "type": "html",
                     "text": "<p>Null относится к типу данных object. Это официально признанная ошибка в языке. Значение null используют, когда нужно обозначить намеренное отсутствие значения. Оно всегда задаётся специально, JavaScript автоматически не устанавливает его.</p>"
                  },
                  {
                     "type": "javascript",
                     "text": "const toDoWeekend = {sat: 'Уборка', sun: null}"
                  }
               ],
               "input": {
                  "type": "next"
               }
            },
            {
               "title": "undefined",
               "subs": [
                  {
                     "type": "html",
                     "text": "<p>undefined показывает, что значение переменной «не определено».</p><p>undefined обычно присваивается переменной, когда она была объявлена, но не было определено её начальное значение. </p><p>Без начального значения можно оставлять только переменную объявленную через let или var. Если объявить переменную через const и не задать ей начального значения, будет ошибка: Uncaught SyntaxError: Missing initializer in const declaration.</p><p>Также, undefined может возвращаться и из функции — это происходит, если функции явно не возвращает ничего другого.</p>"
                  },
                  {
                     "type": "javascript",
                     "text": "let element //undefined"
                  }
               ]
            }
         ]
      }
   }
}